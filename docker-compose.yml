version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: storm-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-storm}
      POSTGRES_USER: ${POSTGRES_USER:-storm}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-storm123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-storm}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - storm-network

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: storm-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - storm-network

  # Qdrant Vector Database (optional, for VectorRM)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: storm-qdrant
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - storm-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: storm-backend
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-storm}:${POSTGRES_PASSWORD:-storm123}@postgres:5432/${POSTGRES_DB:-storm}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - API_PORT=${BACKEND_PORT:-8000}
      - API_HOST=0.0.0.0
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://localhost:3000}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - WORKER_TIMEOUT=${WORKER_TIMEOUT:-120}
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      - backend_uploads:/app/uploads
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - storm-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Celery Worker for background tasks
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: storm-worker
    command: celery -A main.celery_app worker --loglevel=info --concurrency=2
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-storm}:${POSTGRES_PASSWORD:-storm123}@postgres:5432/${POSTGRES_DB:-storm}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "main.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - storm-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'

  # Frontend Next.js Application
  frontend:
    build:
      context: ./frontend/storm-ui
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        - BUILDKIT_INLINE_CACHE=1
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
        - NODE_ENV=${NODE_ENV:-production}
    container_name: storm-frontend
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:8000}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://backend:8000}
      - PORT=3000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - storm-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy (Production only)
  nginx:
    image: nginx:alpine
    container_name: storm-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - storm-network
    profiles:
      - production

  # Flower (Celery monitoring) - Development only
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: storm-flower
    command: celery -A main.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower123}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - storm-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local

networks:
  storm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16