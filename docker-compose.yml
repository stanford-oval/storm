version: '3.8'

services:
  # Qdrant Vector Database (optional, for VectorRM)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: storm-qdrant
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - storm-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: storm-backend
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - QDRANT_URL=http://qdrant:6333
      - API_PORT=${BACKEND_PORT:-8000}
      - API_HOST=0.0.0.0
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://localhost:3000}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - WORKER_TIMEOUT=${WORKER_TIMEOUT:-120}
    volumes:
      - ./storm-projects:/app/storm-projects
      - ./backend/logs:/app/logs
      - backend_uploads:/app/uploads
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - storm-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Frontend Next.js Application
  frontend:
    build:
      context: ./frontend/storm-ui
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        - BUILDKIT_INLINE_CACHE=1
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
        - NODE_ENV=${NODE_ENV:-production}
    container_name: storm-frontend
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:8000}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://backend:8000}
      - PORT=3000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - storm-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy (Production only)
  nginx:
    image: nginx:alpine
    container_name: storm-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - storm-network
    profiles:
      - production

volumes:
  qdrant_data:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local

networks:
  storm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16