name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================
  # Backend Testing
  # ============================================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    # No database services needed - using file-based storage

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r backend/requirements.txt
        pip install -e .

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        pip install black
        black --check backend/

    - name: Type check with mypy
      run: |
        pip install mypy types-requests types-toml types-pytz
        mypy backend/ --ignore-missing-imports --exclude '.*transformers.*'

    - name: Test with pytest
      env:
        SECRET_KEY: test-secret-key
      run: |
        cd backend
        pip install pytest pytest-cov pytest-asyncio httpx
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # ============================================================
  # Frontend Testing
  # ============================================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/storm-ui/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend/storm-ui
        npm ci

    - name: Lint
      run: |
        cd frontend/storm-ui
        npm run lint

    - name: Type check
      run: |
        cd frontend/storm-ui
        npm run type-check

    - name: Format check
      run: |
        cd frontend/storm-ui
        npm run format:check

    - name: Unit tests
      run: |
        cd frontend/storm-ui
        npm run test:ci

    - name: Build application
      run: |
        cd frontend/storm-ui
        npm run build

    - name: E2E tests
      run: |
        cd frontend/storm-ui
        npx playwright install --with-deps
        npm run test:e2e

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: frontend/storm-ui/playwright-report/
        retention-days: 30

  # ============================================================
  # Security Scanning
  # ============================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Backend dependency check
      run: |
        pip install safety
        safety check -r requirements.txt
        safety check -r backend/requirements.txt

    - name: Frontend dependency check
      run: |
        cd frontend/storm-ui
        npm audit --audit-level moderate

  # ============================================================
  # Docker Build and Test
  # ============================================================
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and test backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        target: test
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: false
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    - name: Build and test frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/storm-ui
        file: ./frontend/storm-ui/Dockerfile
        target: test
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: false
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

    - name: Build and push backend production image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        target: production
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    - name: Build and push frontend production image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/storm-ui
        file: ./frontend/storm-ui/Dockerfile
        target: production
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

  # ============================================================
  # Integration Tests
  # ============================================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create environment file
      run: |
        cat > .env << EOF
        REDIS_PASSWORD=redis123
        SECRET_KEY=test-secret-key
        NODE_ENV=test
        CORS_ORIGINS=http://localhost:3000
        EOF

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d backend
        
    - name: Wait for services to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

    - name: Run integration tests
      run: |
        cd backend
        pip install pytest httpx
        pytest tests/integration/ -v

    - name: Stop services
      run: docker-compose down

  # ============================================================
  # Performance Tests
  # ============================================================
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/storm-ui/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend/storm-ui
        npm ci

    - name: Run Lighthouse CI
      run: |
        cd frontend/storm-ui
        npm install -g @lhci/cli
        lhci autorun

    - name: Backend performance tests
      run: |
        cd backend
        pip install locust
        # Run basic load tests
        locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 30s --host http://localhost:8000

  # ============================================================
  # Notification
  # ============================================================
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, docker-build, integration-test]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.docker-build.result == 'success'
      run: echo "✅ All CI checks passed!"
      
    - name: Notify failure
      if: contains(needs.*.result, 'failure')
      run: |
        echo "❌ CI pipeline failed"
        exit 1