# STORM UI Kubernetes Deployment Configuration
# Complete production-ready Kubernetes setup with high availability

apiVersion: v1
kind: Namespace
metadata:
  name: storm
  labels:
    name: storm
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: storm-config
  namespace: storm
data:
  POSTGRES_DB: "storm"
  POSTGRES_USER: "storm"
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  QDRANT_URL: "http://qdrant:6333"
  API_PORT: "8000"
  CORS_ORIGINS: "https://storm-ui.com,https://www.storm-ui.com"
  NODE_ENV: "production"
  NEXT_TELEMETRY_DISABLED: "1"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: storm-secrets
  namespace: storm
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  postgres-password: c3Rvcm0xMjM=  # storm123
  redis-password: cmVkaXMxMjM=      # redis123
  secret-key: eW91ci1zdXBlci1zZWNyZXQta2V5LWNoYW5nZS1pbi1wcm9kdWN0aW9u  # your-super-secret-key-change-in-production

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: storm
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: storm-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - storm
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - storm
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
      storageClassName: fast-ssd

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: storm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        args:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - "$(REDIS_PASSWORD)"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: storm-secrets
              key: redis-password
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Qdrant Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qdrant
  namespace: storm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qdrant
  template:
    metadata:
      labels:
        app: qdrant
    spec:
      containers:
      - name: qdrant
        image: qdrant/qdrant:latest
        ports:
        - containerPort: 6333
        - containerPort: 6334
        env:
        - name: QDRANT__SERVICE__HTTP_PORT
          value: "6333"
        - name: QDRANT__SERVICE__GRPC_PORT
          value: "6334"
        volumeMounts:
        - name: qdrant-storage
          mountPath: /qdrant/storage
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 6333
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6333
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: qdrant-storage
        persistentVolumeClaim:
          claimName: qdrant-pvc

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storm-backend
  namespace: storm
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: storm-backend
  template:
    metadata:
      labels:
        app: storm-backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: ghcr.io/stanford-oval/storm/backend:IMAGE_TAG
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)
        - name: REDIS_URL
          value: redis://:$(REDIS_PASSWORD)@redis:6379
        - name: QDRANT_URL
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: QDRANT_URL
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: POSTGRES_USER
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: POSTGRES_DB
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: storm-secrets
              key: postgres-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: storm-secrets
              key: redis-password
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: storm-secrets
              key: secret-key
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: CORS_ORIGINS
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: NODE_ENV
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: backend-data
          mountPath: /app/data
        - name: backend-logs
          mountPath: /app/logs
      volumes:
      - name: backend-data
        persistentVolumeClaim:
          claimName: backend-data-pvc
      - name: backend-logs
        persistentVolumeClaim:
          claimName: backend-logs-pvc

---
# Worker Deployment (Celery)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storm-worker
  namespace: storm
spec:
  replicas: 2
  selector:
    matchLabels:
      app: storm-worker
  template:
    metadata:
      labels:
        app: storm-worker
    spec:
      containers:
      - name: worker
        image: ghcr.io/stanford-oval/storm/backend:IMAGE_TAG
        command: ["celery"]
        args: ["-A", "main.celery_app", "worker", "--loglevel=info", "--concurrency=2"]
        env:
        - name: DATABASE_URL
          value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)
        - name: REDIS_URL
          value: redis://:$(REDIS_PASSWORD)@redis:6379
        - name: CELERY_BROKER_URL
          value: redis://:$(REDIS_PASSWORD)@redis:6379/0
        - name: CELERY_RESULT_BACKEND
          value: redis://:$(REDIS_PASSWORD)@redis:6379/0
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: POSTGRES_USER
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: POSTGRES_DB
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: storm-secrets
              key: postgres-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: storm-secrets
              key: redis-password
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - celery
            - -A
            - main.celery_app
            - inspect
            - ping
          initialDelaySeconds: 60
          periodSeconds: 30
        volumeMounts:
        - name: worker-data
          mountPath: /app/data
        - name: worker-logs
          mountPath: /app/logs
      volumes:
      - name: worker-data
        persistentVolumeClaim:
          claimName: backend-data-pvc
      - name: worker-logs
        persistentVolumeClaim:
          claimName: backend-logs-pvc

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storm-frontend
  namespace: storm
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: storm-frontend
  template:
    metadata:
      labels:
        app: storm-frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/stanford-oval/storm/frontend:IMAGE_TAG
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_API_URL
          value: https://storm-ui.com/api
        - name: NEXT_PUBLIC_WS_URL
          value: wss://storm-ui.com/ws
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: NODE_ENV
        - name: NEXT_TELEMETRY_DISABLED
          valueFrom:
            configMapKeyRef:
              name: storm-config
              key: NEXT_TELEMETRY_DISABLED
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: storm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qdrant-pvc
  namespace: storm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-data-pvc
  namespace: storm
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-logs-pvc
  namespace: storm
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: storm
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: storm
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: qdrant
  namespace: storm
spec:
  selector:
    app: qdrant
  ports:
  - name: http
    port: 6333
    targetPort: 6333
  - name: grpc
    port: 6334
    targetPort: 6334
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: storm-backend
  namespace: storm
spec:
  selector:
    app: storm-backend
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: storm-frontend
  namespace: storm
spec:
  selector:
    app: storm-frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: storm-ingress
  namespace: storm
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    nginx.ingress.kubernetes.io/rate-limit-rps: "50"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - storm-ui.com
    - www.storm-ui.com
    secretName: storm-ui-tls
  rules:
  - host: storm-ui.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: storm-backend
            port:
              number: 8000
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: storm-backend
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: storm-frontend
            port:
              number: 3000
  - host: www.storm-ui.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: storm-frontend
            port:
              number: 3000

---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: storm-backend-hpa
  namespace: storm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: storm-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: storm-frontend-hpa
  namespace: storm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: storm-frontend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: storm-network-policy
  namespace: storm
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: monitoring
  - from:
    - podSelector:
        matchLabels:
          app: storm-backend
    - podSelector:
        matchLabels:
          app: storm-frontend
    - podSelector:
        matchLabels:
          app: storm-worker
  egress:
  - {}  # Allow all outbound traffic

---
# Pod Disruption Budget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: storm-backend-pdb
  namespace: storm
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: storm-backend

---
# Pod Disruption Budget for Frontend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: storm-frontend-pdb
  namespace: storm
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: storm-frontend